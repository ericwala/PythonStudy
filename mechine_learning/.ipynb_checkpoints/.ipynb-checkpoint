{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "10000/10000 [==============================] - 1s 119us/step - loss: 0.0895 - accuracy: 0.1774\n",
      "Epoch 2/20\n",
      "10000/10000 [==============================] - 1s 101us/step - loss: 0.0869 - accuracy: 0.3951\n",
      "Epoch 3/20\n",
      "10000/10000 [==============================] - 1s 99us/step - loss: 0.0829 - accuracy: 0.4885\n",
      "Epoch 4/20\n",
      "10000/10000 [==============================] - 1s 106us/step - loss: 0.0764 - accuracy: 0.5698\n",
      "Epoch 5/20\n",
      "10000/10000 [==============================] - 1s 99us/step - loss: 0.0668 - accuracy: 0.6416\n",
      "Epoch 6/20\n",
      "10000/10000 [==============================] - 1s 99us/step - loss: 0.0555 - accuracy: 0.7116\n",
      "Epoch 7/20\n",
      "10000/10000 [==============================] - 1s 95us/step - loss: 0.0456 - accuracy: 0.7645\n",
      "Epoch 8/20\n",
      "10000/10000 [==============================] - 1s 96us/step - loss: 0.0385 - accuracy: 0.7858\n",
      "Epoch 9/20\n",
      "10000/10000 [==============================] - 1s 98us/step - loss: 0.0333 - accuracy: 0.8050\n",
      "Epoch 10/20\n",
      "10000/10000 [==============================] - 1s 102us/step - loss: 0.0290 - accuracy: 0.8459\n",
      "Epoch 11/20\n",
      "10000/10000 [==============================] - 1s 101us/step - loss: 0.0255 - accuracy: 0.8679\n",
      "Epoch 12/20\n",
      "10000/10000 [==============================] - 1s 97us/step - loss: 0.0230 - accuracy: 0.8794\n",
      "Epoch 13/20\n",
      "10000/10000 [==============================] - 1s 94us/step - loss: 0.0211 - accuracy: 0.8866\n",
      "Epoch 14/20\n",
      "10000/10000 [==============================] - 1s 102us/step - loss: 0.0195 - accuracy: 0.8933\n",
      "Epoch 15/20\n",
      "10000/10000 [==============================] - 1s 99us/step - loss: 0.0184 - accuracy: 0.8983\n",
      "Epoch 16/20\n",
      "10000/10000 [==============================] - 1s 97us/step - loss: 0.0174 - accuracy: 0.9023\n",
      "Epoch 17/20\n",
      "10000/10000 [==============================] - 1s 95us/step - loss: 0.0166 - accuracy: 0.9049\n",
      "Epoch 18/20\n",
      "10000/10000 [==============================] - 1s 96us/step - loss: 0.0160 - accuracy: 0.9076\n",
      "Epoch 19/20\n",
      "10000/10000 [==============================] - 1s 98us/step - loss: 0.0154 - accuracy: 0.9127\n",
      "Epoch 20/20\n",
      "10000/10000 [==============================] - 1s 97us/step - loss: 0.0148 - accuracy: 0.9135\n",
      "10000/10000 [==============================] - 1s 136us/step\n",
      "test acc 0.9046000242233276\n"
     ]
    }
   ],
   "source": [
    "import numpy as np \n",
    "from keras.models import Sequential\n",
    "from keras.layers.core import Dense, Dropout, Activation\n",
    "from keras.layers import Conv2D, MaxPooling2D, Flatten\n",
    "from keras.optimizers import SGD, Adam\n",
    "from keras.utils import np_utils\n",
    "from keras.datasets import mnist\n",
    "\n",
    "def load_data():\n",
    "    (x_train, y_train), (x_test, y_test) = mnist.load_data()\n",
    "    \n",
    "    number = 10000\n",
    "    x_train = x_train[0:number]\n",
    "    y_train = y_train[0:number]\n",
    "    x_train = x_train.reshape(number, 28*28)\n",
    "    x_test = x_test.reshape(x_test.shape[0], 28*28)\n",
    "    x_train = x_train.astype(\"float32\")\n",
    "    x_test = x_test.astype(\"float32\")\n",
    "    \n",
    "    y_train = np_utils.to_categorical(y_train, 10)\n",
    "    y_test = np_utils.to_categorical(y_test, 10)\n",
    "    x_train = x_train \n",
    "    x_test = x_test\n",
    "    \n",
    "    x_train = x_train/255\n",
    "    x_test = x_test/255\n",
    "    return (x_train, y_train), (x_test, y_test)\n",
    "\n",
    "(x_train, y_train), (x_test, y_test) = load_data()\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Dense(input_dim=28*28, units=700, activation=\"relu\"))\n",
    "model.add(Dense(units=700, activation=\"relu\"))\n",
    "model.add(Dense(units=700, activation=\"relu\"))\n",
    "model.add(Dense(units=10, activation=\"softmax\"))\n",
    "model.compile(loss=\"mse\", optimizer=SGD(lr=0.1), metrics=[\"accuracy\"])\n",
    "\n",
    "model.fit(x_train, y_train, batch_size=100, epochs = 20)\n",
    "\n",
    "result = model.evaluate(x_test, y_test)\n",
    "print(\"test acc\", result[1])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "[0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n",
      "(784,)\n",
      "(28, 28)\n"
     ]
    }
   ],
   "source": [
    "import numpy as np \n",
    "from keras.models import Sequential\n",
    "from keras.layers.core import Dense, Dropout, Activation\n",
    "from keras.layers import Conv2D, MaxPooling2D, Flatten\n",
    "from keras.optimizers import SGD, Adam\n",
    "from keras.utils import np_utils\n",
    "from keras.datasets import mnist\n",
    "from PIL import Image\n",
    "def img_show(img):\n",
    "    pil_img = Image.fromarray(np.uint8(img))\n",
    "    pil_img.show()\n",
    "def load_data():\n",
    "    (x_train, y_train), (x_test, y_test) = mnist.load_data()\n",
    "    \n",
    "    number = 10000\n",
    "    x_train = x_train[0:number]\n",
    "    y_train = y_train[0:number]\n",
    "    x_train = x_train.reshape(number, 28*28)\n",
    "    x_test = x_test.reshape(x_test.shape[0], 28*28)\n",
    "    x_train = x_train.astype(\"float32\")\n",
    "    x_test = x_test.astype(\"float32\")\n",
    "    \n",
    "    y_train = np_utils.to_categorical(y_train, 10)\n",
    "    y_test = np_utils.to_categorical(y_test, 10)\n",
    "    x_train = x_train \n",
    "    x_test = x_test\n",
    "\n",
    "\n",
    "    return (x_train, y_train), (x_test, y_test)\n",
    "\n",
    "(x_train, y_train), (x_test, y_test) = load_data()\n",
    "a = int(input())\n",
    "img = x_train[a]\n",
    "label = y_train[a]\n",
    "print(label)\n",
    "print(img.shape)\n",
    "img = img.reshape(28, 28)\n",
    "print(img.shape)\n",
    "img_show(img)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'dataset'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-26-8e22054ac035>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0msys\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mos\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[0msys\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpardir\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 4\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mdataset\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmnist\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mload_mnist\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      5\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mPIL\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mImage\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0mimg_show\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'dataset'"
     ]
    }
   ],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "keras",
   "language": "python",
   "name": "keras"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
